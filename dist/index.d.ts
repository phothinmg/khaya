export var DateTime: {
    new (m_jd: any, m_tz: any, m_ct?: number, m_SG?: number): {
        m_tz: any;
        m_jd: any;
        m_ct: number;
        m_SG: number;
        SetTimezone(tz: any): void;
        Set2Now(): void;
        SetJD(jd: any): void;
        SetUnixTime(ut: any): void;
        SetDateTime(year: any, month: any, day: any, hour?: number, minute?: number, second?: number, tz?: number, ct?: number, SG?: number): void;
        SetDateTimeString(tstr: any, tz?: number, ct?: number, SG?: number): void;
        SetCT(ct: any): void;
        SetSG(sg: any): void;
        ToString(fs?: string): string;
        readonly jd: any;
        readonly jdl: any;
        readonly jdn: number;
        readonly jdnl: number;
        readonly y: number;
        readonly m: number;
        readonly d: number;
        readonly h: number;
        readonly n: number;
        readonly s: number;
        readonly l: number;
        readonly w: number;
        readonly ut: number;
        readonly tz: any;
        readonly ct: number;
        readonly SG: number;
        readonly mlen: number;
    };
    j2w(jd: any, ct?: number, SG?: number): {
        y: number;
        m: number;
        d: number;
        h: number;
        n: number;
        s: number;
    };
    t2d(h: any, n: any, s: any): number;
    w2j(y: any, m: any, d: any, h?: number, n?: number, s?: number, ct?: number, SG?: number): any;
    u2j(ut: any): number;
    j2u(jd: any): number;
    jdnow(): number;
    ltzoh(): number;
    j2s(jd: any, fs?: string, tz?: number, ct?: number, SG?: number): string;
    s2j(tstr: any, tz?: number, ct?: number, SG?: number): number;
    GetDigits(str: any): string;
    wml(y: any, m: any, ct?: number, SG?: number): number;
};
export var burmeseDate: {
    new (m_jd: any, m_tz: any, m_ct?: number, m_SG?: number): {
        SetMDateTime(my: any, mm: any, md: any, hour?: number, minute?: number, second?: number, tz?: number): void;
        m_jd: any;
        readonly myt: any;
        readonly my: number;
        readonly sy: number;
        readonly my_name: string;
        readonly mm: any;
        readonly md: number;
        readonly mp: number;
        readonly mf: number;
        readonly mmlen: number;
        readonly sabbath: string;
        readonly yatyaza: "" | "Yatyaza";
        readonly pyathada: string;
        readonly nagahle: string;
        readonly mahabote: string;
        readonly nakhat: string;
        readonly astro: string[];
        readonly holidays: string[];
        readonly holidays2: string[];
        ToMString(fs?: string): string;
        m_tz: any;
        m_ct: number;
        m_SG: number;
        SetTimezone(tz: any): void;
        Set2Now(): void;
        SetJD(jd: any): void;
        SetUnixTime(ut: any): void;
        SetDateTime(year: any, month: any, day: any, hour?: number, minute?: number, second?: number, tz?: number, ct?: number, SG?: number): void;
        SetDateTimeString(tstr: any, tz?: number, ct?: number, SG?: number): void;
        SetCT(ct: any): void;
        SetSG(sg: any): void;
        ToString(fs?: string): string;
        readonly jd: any;
        readonly jdl: any;
        readonly jdn: number;
        readonly jdnl: number;
        readonly y: number;
        readonly m: number;
        readonly d: number;
        readonly h: number;
        readonly n: number;
        readonly s: number;
        readonly l: number;
        readonly w: number;
        readonly ut: number;
        readonly tz: any;
        readonly ct: number;
        readonly SG: number;
        readonly mlen: number;
    };
    GetMyConst(my: any): {
        EI: number;
        WO: number;
        NM: number;
        EW: number;
    };
    bSearch2(k: any, A: any): number;
    bSearch1(k: any, A: any): number;
    cal_watat(my: any): {
        fm: number;
        watat: number;
    };
    cal_my(my: any): {
        myt: any;
        tg1: number;
        fm: number;
        werr: number;
    };
    j2m(jdn: any): {
        myt: any;
        my: number;
        mm: number;
        md: number;
    };
    cal_mp(md: any, mm: any, myt: any): number;
    cal_mml(mm: any, myt: any): number;
    cal_myl(myt: any): number;
    cal_mf(md: any): number;
    cal_md(mf: any, mp: any, mm: any, myt: any): number;
    m2j(my: any, mm: any, md: any): number;
    cal_sabbath(md: any, mm: any, myt: any): number;
    cal_yatyaza(mm: any, wd: any): number;
    cal_pyathada(mm: any, wd: any): number;
    cal_nagahle(mm: any): number;
    cal_mahabote(my: any, wd: any): number;
    cal_nakhat(my: any): number;
    cal_thamanyo(mm: any, wd: any): number;
    cal_amyeittasote(md: any, wd: any): number;
    cal_warameittugyi(md: any, wd: any): number;
    cal_warameittunge(md: any, wd: any): number;
    cal_yatpote(md: any, wd: any): number;
    cal_thamaphyu(md: any, wd: any): number;
    cal_nagapor(md: any, wd: any): number;
    cal_yatyotema(mm: any, md: any): number;
    cal_mahayatkyan(mm: any, md: any): number;
    cal_shanyat(mm: any, md: any): number;
    cal_astro(jdn: any): string[];
    cal_holiday(jdn: any): string[];
    DoE(y: any): number;
    cal_holiday2(jdn: any): string[];
    j2ms(jd: any, fs?: string, tz?: number): string;
    j2w(jd: any, ct?: number, SG?: number): {
        y: number;
        m: number;
        d: number;
        h: number;
        n: number;
        s: number;
    };
    t2d(h: any, n: any, s: any): number;
    w2j(y: any, m: any, d: any, h?: number, n?: number, s?: number, ct?: number, SG?: number): any;
    u2j(ut: any): number;
    j2u(jd: any): number;
    jdnow(): number;
    ltzoh(): number;
    j2s(jd: any, fs?: string, tz?: number, ct?: number, SG?: number): string;
    s2j(tstr: any, tz?: number, ct?: number, SG?: number): number;
    GetDigits(str: any): string;
    wml(y: any, m: any, ct?: number, SG?: number): number;
};
declare var raw_time_zones_default: {
    name: string;
    alternativeName: string;
    group: string[];
    continentCode: string;
    continentName: string;
    countryName: string;
    countryCode: string;
    mainCities: string[];
    rawOffsetInMinutes: number;
    abbreviation: string;
    rawFormat: string;
}[];
declare function thingyin_default(my: any): {
    from: any;
    to: any;
    atatTime: string;
    akyaTime: string;
    akyoDay: string;
    akyaDay: string;
    akyatDay: string;
    sakd: string;
    atatDay: string;
    nyDay: string;
};
export function mmdate(date: any, lang: any): {
    ssy: any;
    mmy: any;
    myn: any;
    mmm: any;
    mp: any;
    mmd: any;
    yyz: any;
    ptd: any;
    dgh: any;
    sbat: any;
    hd1: string;
    hd2: string;
    mhb: any;
    nk: any;
    ast: any[];
    mwd: any;
    MY: number;
    mmlen: any;
    myt: any;
};
declare function translate_default({ text, lang }: {
    text: any;
    lang: any;
}): any;
export function worldTime(timeZoneName: any): {
    rawOffsetInMinutes: number;
    rawOffsetInSeconds: number;
    timestampInUtc: number;
    timestampLocal: number;
    localDateTime: Date;
    dayNumberOfYear: number;
    weekOfYear: number;
    utcOffsetString: string;
    localDateTimeString: string;
    utcDateTimeString: string;
};
export { raw_time_zones_default as data, thingyin_default as getThingyan, translate_default as translate };
//# sourceMappingURL=index.d.ts.map